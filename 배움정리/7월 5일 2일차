알고리즘 2일차

배열
[] 대괄호 열고 닫고

배열에 length 기능을 사용하면 

배열 안에 몇 개의 데이터가 있는지 확인할 수 있다

배열 안의 데이터는 index 번호를 가지며 0번 째 인덱스 부터 시작한다

배열의 index로 해당 데이터에 접근할 수 있다

배열 갯수보다 높은 수를 []에 입력하면

undefinded를 나타낸다

메서드를 이용해서 기능 수행

push

Array.push() 배열 맨 뒤에 데이터 추가
Array.unshift() 배열 맨 앞에 데이터 추가  unshift는 다른 인덱스들에게도 영향을 준다

pop 배열 맨 뒤의 데이터 삭제 Array.pop()
shift 배열 맨 앞의 데이터 삭제 Array.shift() shift도 다른 인덱스에 영향을 준다

indexOf 데이터의 index 값 반환      Array.indexOf() 주어진 배열에 존재하지 않는 데이터라면 -1 반환
includes 데이터의 존재 여부 반환(true/false) Array.includes()  데이터의 불린값을 반환

배열을 선언과 할당할 때

인덱스를 이용한 방법을 많이 사용하지 않는 이유는

잘못된 인덱스를 선택하여 오류가 날까봐

현업에서는 arr.push()를 많이 사용한다

웬만하면 메서드를 이용해서 쓰자

객체 

데이터들을 종류에 맞게 분류하여 저장 

객체는 중괄호 {}

쉼표로 구분

객체는 Key와 Value로 데이터를 저장한다

Key는 데이터의 이름, Value는 데이터의 값

객체의 데이터를 조회할 때는 

객체의 Key 값을 이용해 조회할 수 있다.


const Obj = {
    "name" : "철수",
    "age" : 12,
    "school" : {
        "name" : "다람쥐 초등학교"
    }
}

Obj.name   "철수"

Obj.age     "12"

Obj.school  {"name":"다람쥐 초등학교"}

점을 사용하는 dot.notation이라는 표기 방법이다

bracket notation은 괄호를 사용하는 표기방법

Obj["name"]  '철수'

bracket notation은 

let key = "name"
Obj[key] 괄호 안에 큰따옴표가 없으면 key라는 변수를 찾는다


객체의 데이터 추가/변경

Obj.dog = "체리"

닷 노에이션과 =을 사용해서 할당

데이터 변경 Obj.dog = "똘이"

객체 데이터 삭제

delete Obj.school