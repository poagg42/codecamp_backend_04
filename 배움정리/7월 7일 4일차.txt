알고리즘 수업

반복문(For)

for(let i = 0; i < 5; i = i + 1){
    //초기값 최종값 증감값
    console.log('안녕하세요?')

}

조건식은 반복문을 실행하는 조건을 설정
조건이 true면 반복 수행

증감식은 반복문을 실행할 때마다 최초식을 증감
반복문의 실행 범위를 조절할 수 있다.


로직 실행 순서
      1         2,5        4
for(let i = 0; i < 5; i = i +1){
                3
        console.log("안녕하세요")
}

i가 5가되면 반복을 멈춘다

break : 원하는 구간에서 반복문을 종료

continue : 해당 구간의 반복문을 실행하지 않음

이름        특징                      사용 범위            문법

for-in  -객체를 반복할 수 있다        문자열, 객체, 배열   for(let key of object)

for-of  -각각의 요소들을 가져올 수 있다     문자열, 배열     for(let key of object)

forEach -반복문은 아니고 메서드의 일종 
        배열에만 사용가능               배열        Array.forEach (function())

while    -최초식, 조건식, 증감식이 
            분할되어 사용               for문과 동일    while()






for in 문 예시

const obj = {
	name: "otter",
	age: 26
}

// 여기서 data는 변수 
for(let data in obj) {
console.log(data, obj[data])  // 변수를 가져올 때는 bracket notation
}

객체를 반복시키면 키가 들어온다

for-of 문 예시

const obj = {
	name: "otter",
	age: 26
}
const str = "abcde"
const arr = ["a", "b", "c"]


for(let data of arr) {
console.log(data)
}

for of 문 효율성 부분에서 느리다

for문이 더 좋을 때가 있다


forEach문 예시

const arr = ["a", "b", "c"]

arr.forEach((data, idx, ) => {
 console.log(data, idx)
} 
            

  
  )

  while문 예시

let answer = 0; // 로봇이 움직인 횟수
let current = 1; // 로봇의 현재 위치

while( current !== 100  ) {
  current++;
  answer++;
  
}

answer;


정규시간 

어제했던 Postman - restAPI를 vscode로 옮겨본다

그리고 우리가 만든 API를 Postman으로 실습해본다

익스프레스라는 도구로 API를 만들어본다

라이브러리 자체 사이트가 많은데

개발하다가 막히는 부분이 있으면 독스에서 읽으면서 해결한다

익스프레스를 다운받으려면 원하는 폴더에 가서

yarn init -> yarn add XXXX 하면 된다

그러면 package.json, yarn.lock 등이 생긴다

package.json은 뭐가 깔렸는지 알려준다

package.json에서 "dependencies"에 뭐가 깔렸는지 나와있다

yarn lock은 이것에 대한 버전을 기록하고 있다

실무에서는 버전이 중요하다

계속 버전을 유지해야 다른 에러가 안 뜬다

실제로 다운받아서 사용되는 소스코드들은 node_modules에 있다

만약 node_modules를 삭제하게 되면 express 관련 내용들은 작동하지 않는다.

node_modules가 삭제되었다면 yarn install을 해주면

node_modules가 다시 생긴다

너무 무거워서 github에 올리기 싫은 파일들은

.gitignore 파일을 만들고

그 안에 파일명을 적는다

express hello world 예제

/는 end point

받는게 req 보내주는게 res 

listen -> 요청 기다려줘

프로그램이 켜져있을 때만 api 접속이 가능하다

http://localhost:3000/aaa

localhost는 내 컴퓨터

control + c로 프로그램 끄기

꺼지면 api 요청이 안 된다. -> 서버가 죽었다 -> 프로그램이 종료가 됐다

app.listen 같은 것을 서버 프로그램이라 한다

포트번호는 (0~65535) 번까지 있다

우리가 어디에 접속하려면 포트번호가 필요하다

여기서는 3000번 



브라우저 3개 백엔드 한 개 프론트엔드 한 개 DB 노트북 한 대

B , F 모두 24시간 listen하고 있는 서버 프로그램(포트 존재)

DB도 24시간 listen하고 있어야 한다 포트존재(27017)

앞 뒤 다 자르고 서버 개발자라고 하면

백엔드 서버 개발자를 말한다

nodemon을 다운받고
package.json에 
"scripts": {
    "aaa": "nodemon index.js"
  },

  를 만든다

  aaa라는 나만의 명령어가

  yarn aaa를 하면 "nodemon index.js"를 실행한다
(보통 dev로 많이 쓴다)
  nodemon은 저장하면 바로 수정되어 실행된다(자동 refresh)

  04-02 로 복사해서 진행하는데

  04-01 node_modules는 어차피 yarn install하면 다운 되고

  사용하지 않고 용량만 차지하니까 삭제한다

  / ... 의 이름이 같아도 메서드로 구분이 가능하다 (Restful하다)

  04-02 yarn dev

  하고 post - body raw json(application)해서 작성한다

  import export로

  phone.js에서 함수를 불러온다 퍼사드

  Postman를 프론트엔드 브라우저라고 가정한다

  인증번호 받기 버튼을 누르면 api받기 요청이 된다

  Postman body에서 {
	"myphone": "01012345678"
}

를 하고 myphone 변수를 

/tokens/phone' 안에서 선언한다 

결국 프론트엔드에서 req 해준것을 백엔드가 res 하는 것을 배워보았다.

import export를 사용해서 퍼사드 패턴, 01-05 참고해서 1일차 과제하자

다음은 스웨거를 통해 독스를 만들어본다

스웨거는 오타와 띄어쓰기에 민감하다

오늘 배운 것 정리

가장 중요한 것
서버와 서버프로그램, 포트

서버는 24시간 켜져있어야 접속이 된다

백엔드 서버는 어떤 컴퓨터에서 서버프로그램이 24시간 켜져 있는 것


