마이크로 서비스 

Browser -> Nestjs API 게이트웨이 -> Nestjs(/auth) / Nestjs(/boards) / Nestjs(/products)

auth만 들어있는 Nestjs -> MySQL 인증 DB
boards만 들어있는 Nestjs -> MySQL 게시판 DB
products만 들어있는 Nestjs -> MySQL 상품 DB

각각의 폴더에 들어가서 yarn add를 3번 해준다. -> 폴더 하나가 하나의 컴퓨터에 들어간다.

이걸 왜 하는 것인가?

              왼쪽 하지 않으면             ->          오른쪽 하게 되면

1. 소스코드 전체를 빌드 / 배포하려면 오래 걸림   -> 게시판 API 바뀌면 게시판 폴더만 다시 배포

2. 에러나서 서버 죽으면 모든 API 사용 불가능    -> 게시판 죽어도 상품, 로그인 등 나머지는 모두 사용가능

3. Nestjs 개발자만 뽑아야된다.              -> 게시판은 Nestjs, 상품은 Django, 로그인은 Spring 등 다양한 개발자 채용 가능


과하게 미래를 생각하고 만드는 것 -> 오버 엔지니어링

단점 -> 전체적인 기술 복잡도 증가

따라서 작은 서비스 보다 큰 서비스에서 많이 사용



오늘 배운 것 정리

마이크로서비스를 3단계로 나눠서 했다.

다른 스택을 가진 개발자들이 모일 수 있다.

오버 엔지니어링이 되지 않게 조심

