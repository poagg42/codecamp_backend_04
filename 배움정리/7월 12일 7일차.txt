알고리즘 수업

at이라는 메서드가 생겼다
차이점은 .at은 음수를 받을 수 있다.

const arr = [1, 2, 3]

arr[arr.length-1] // 3
arr.at(-1) // 3

정규시간 

백엔드 영역에서는 백엔드 컴퓨터와 데이터베이스 컴퓨터가 모두 필요하다

가짜 컴퓨터(가상화 컴퓨터)를 만들어야되는데 그것을 쉽게 만들어주는 것이 도커


1. 프론트엔드/ 백엔드/ 데이터베이스 전체 구조를 알아보자

2. 가상컴퓨터에서 API 서버 실행시켜줘 >>> Docker

3. 내 포트가 이상해 >>> Port-Forwarding 포트번호가 충돌난다



프론트엔드 백엔드 구조 

Br 브라우저 
B 백엔드
F 프론트엔드
DB 데이터베이스


백엔드에는 API가 달려있다

ODM ObjectDocumentMapping
ORM ObjectRelationMapping   백엔드가 DB와 통신을 도와주는 툴이다. 
DB 명령어를 자동으로 만들어주는 라이브러리(백엔드 컴퓨터에 설치한다.) 

만약 보드 테이블에서 번호와 제목과 작성자 

관계형데이터베이스 ORM 설치
Document 데이터베이스 ODM 설치

DB 설치할 컴퓨터가 한 대 필요하고

백엔드 설치할 컴퓨터가 한 대 필요하다

DB를 가짜컴퓨터(도커)에 설치한다

아마 DB를 위해 도커 두 개 깔듯?

근본적인 이유?

부하를 분산시킨다

도커 두 대 깔아서
한 대에는 express 한 대에는 mongodb

네모난 화면에 원하는 운영체제 설치한다

가상머신 >> 모든 환경 통일

되게 느려진다

가상머신인데 빠른 도커를 사용하자

Docker 

1. 개발/배포환경 통일

2. 프로그램 미리 설치

3. 가벼운 가상컴퓨터

부팅 등 운영체제의 핵심 기능은 공유하는 가상머신

예를들어 프린터 이런 것은 밖에 있는 OS 것을 공유하자

OS 전체를 새로 설치하는 것이 아니라서 훨씬 빨라진다

Docker에서

RUN과 CMD가 다른 점은?

WORKDIR << 도커에서 커서가 깜빡깜빡

.dockerignore << 도커에 카피하지마라

도커 서버 키는 법

sudo docker run

도커 프로세스 보는 법

docker process -> sudo docker ps


하나하나를 컨테이너라고 한다

컨테이너 id를 통해서 컨테이너에 접속한다

컨테이너 접속법

sudo docker exec -it "container id"

커서 깜빡거리게 하는 것 shell

pwd -> working directory

root@38a2f034dfb4:/myfolder# mkida aaa 하면 aaa 라는 폴더가 생긴다

내 컴퓨터와 도커 컴퓨터가 분리되어 있다

도커 쉘에서 나오는 법 -> exit

왜 postman에서 응답이 안 됐는가?

내 컴퓨터에서 포스트맨

도커에서(linux) 에서 express 

express에서 3000번 포트가 24시간 대기 중 

우리는 원래 하던 대로 내 컴퓨터 포스트맨에서 주소를 입력하고 send 버튼을 누른다

send 버튼을 누르면 내컴퓨터에 있는 3000번 포트로 실행된 프로그램을 찾는다

근데 내 컴퓨터에 아무리 찾아도 3000번 포트로 실행된 프로그램이 없다

그래서 에러가 남

해결 방법은 도커에 있는 3000번 포트로 연결해줘야한다 -> 포트 포워딩

500번을 설정해주고 3000번이랑 연결한다

localhost:500/boards  > send    -------> 500   -> 3001      3001 express

docker run -p 500: 3001 이미지

도커를 껐다가 다시 킨다

도커 끄는 방법 

터미널 하나 분할해서 열고 sudo docker ps

sudo docker stop "스톱할 컨테이너 id"

시간이 좀 걸리고

스탑 된 아이디가 뜬다

컨테이너 삭제를 하려면

sudo docker rm "삭제할 컨테이너 id"

이것은 컴퓨터를 삭제한 거지 이미지를 삭제한 것이 아니다

sudo docker images를 하게 되면 이미지는 남아있다

언제든지 컴퓨터는 다시 만들 수 있다

만약 이미지까지 삭제하고 싶다면

sudo docker image rmi "삭제할 이미지 id"

모두 삭제하고 싶으면 

sudo docker system prune -a

다시 처음부터 만들기

sudo docker build .

build 하는데 시간이 걸린다

두 번째 빌드는 빠른데 

캐시에 있는 것을 가지고 와서 괜찮다

sudo docker images로 이미지 확인하고

이제는 sudo docker run -p 500:3001 "이미지 id"

이후 postman으로 http://localhost:500/boards 하면 내용이 나온다

sudo docker ps -a 하면 컨테이너 아이디만 쫙 나온다

sudo docker stop `docker ps -a` 하면 전체가 종료

백틱을 하면 백틱 안 내용 먼저 실행

도커는 

캐시에 없으면 새로 시작한다

소스코드 하나 바꿨다고 yarn install 다시 하게 되면 굉장히 시간 손실이 많이 든다

그래서 구조를 수정해야되는데 



오늘 배운 것 핵심

컴퓨터 안의 새로운 컴퓨터가

포트 포워딩을 하지 않으면 안으로 뚫고 들어갈 수 없다.

