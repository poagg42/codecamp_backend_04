알고리즘

const newSet = new Set([1, 2, 3, 2])

console.log([...newSet])
Array.from(newSet)

newSet.forEach((el) => {
    console.log(el)        // set객체는 배열의 형태를 가지기 때문에 반복문에도 사용할 수 있다.
})

// 1. 배열 형태를 가지는 객체 데이터
typeof newSet
typeof []

Array.isArray([])
Array.isArray(newSet)

// 2. 고유한 값만 저장 (중복 데이터 x)
newSet

// 데이터 추가
newSet.add(4)

// 데이터 삭제

newSet.delete(2)
newSet

// 데이터 조회
newSet.has(2)
newSet.has(4)

// 길이 조회

newSet.size

// 데이터 리셋

newSet.clear()
newSet

정규시간

의존성 주입 DI  Dependency-Injection
제어의 역전 IOC( Inversion- Of - Control) Container
타입스크립트 Typescript

mvc는 많은 사람들이 구조나 방법을 같이 쓸 때 그것을 한 데 모은 것

디자인 패턴의 일종

강한 결합 tight coupling

DI  Dependency-Injection 의존성을 밖에서 만들어서 주입한다.

내가 해야 할 제어를 nest.js가 대신한다.

제어의 역전 IOC

그래서 nest가 그런 서비스들을 주입해준다.

소스코드를 바꾸지 않고 밖에서 주입한다.

nest.js에서 알아서 해주기 때문에

구조를 만들어서 주입한다( nest가) (DI)를 주입

이것이 IOC 제어의 역전

우리가 원래는 dependency를 new 해서 넣어줬어야 된다 하지만 역전

싱글톤 패턴 - 할 때마다 new하는 것이 아니라 한 개 만들어놓고 돌려쓴다.

DI 이면 싱글톤인가? 아니다

근데 그래도 일반적이다

nest.js에서는 디폴트


왜 nest.js인가?

여러 명이 개발할 때 모양이 다 다르다

누구는 화살표 함수 누구는 선언식

누가 휴가 갔을 때 어떻게 코드를 짜야하는가?

프레임워크를 사용하면 모두가 통일된 모습을 보일 수 있다.

효율적이고 안전한 프로그램

설치해서 나온 폴더 

초기 폴더구조를 보일러 플레이트라고 한다.

test폴더는 api가 잘 작동하는지 확인하는 코드가 있다.

.eslintrc.js는 린터라고 부른다. => 여러 사람이 코딩을할 때 규칙을 통일화 ( == ,===  등등 통일)

.prettierrc 포맷터 누구는 들여쓰기 2칸, 누구는 들여쓰기 4칸

READ ME 내가 내 프로젝트 설명서 만들기

yarn.lock 버전 관리 파일

타입스크립트

다른 언어에서 자바스크립트로 변환되고 그 변환된 자바스크립트가 실행된다.

2교시 nest.js 설치


이해할 순서

1. typescript  - > : string 같은거

2. decorator 작동하는 것

3. private readonly

타입스크립트

자바스크립트의 타입을 강제시키는 기능

let aaa: string = "안녕하세요"

aaa = 123

// aaa는 문자만 들어갈 수 있는 상자

나 혼자 할 때는 심플하게 할 수 있는데

여러 명이 하면 뭐가 들어갔는지 알 수가 없다

잘못하면 큰 에러가 난다

큰 서비스라면 지뢰밭이 된다.

객체는 나만의 타입을 만들어줘야 한다.

Interface 명령어를 사용해서 타입을 만든다.

ex) Interface IProfile {    // I + 변수이름(Profile)
    name: string;
    age: number;
}

let profile: Iprofile = { name: "철수" , age: 13}

typescript는 타입 추론을 한다.

let aaa = "안녕하세요"; << 이렇게 해버리면 aaa는 string으로 추론한다.

let bbb: string = "반갑습니다"; << 타입 명시

타입 명시를 그럼 왜 할까?

let ccc: number | string = 1000; 

ccc = 1000원; <<  처럼 1000이 미래에 1000원이 될 경우 타입 명시가 필요하다.

//타입 추론
let aaa = "안녕하세요",
  aaa = 3;

//타입 명시

let bbb: string = "반갑습니다";
bbb = 10;

// 타입 명시가 필요한 상황

let ccc: number | string = 1000;
ccc = "1000원";

// 숫자 타입

let ddd: number = 10;
ddd = "철수";

// 불린 타입
let eee: boolean = true;
eee = false;
eee = "false"; // 자바스크립트에서는 가능한데 문자열 안에 뭐가 들어있으면 true로 작동함
// 우리가 원하는 것은 false인데 대형사고가 날 수 있다.

// 배열 타입
let fff: number[] = [1, 2, 3, 4, 5, "안녕하세요"];
let ggg: string[] = ["철수", "영희", "훈이", 10];
let hhh = ["철수", "영희", "훈이", 10]; // (string | number)[]  배열 타입으로 추론됨

//  객체 타입
interface IProfile {
  name: string;
  age: number | string;
  school: string;
  hobby?: string; // ?는 있을 수도 있고 없을 수도 있다. 를 뜻한다.
}
const profile: IProfile = {
  name: "철수",
  age: 8,
  school: "다람쥐초등학교",
};

profile.age = "8살";
profile.hobby = "수영"; // 처음에는 없는데 나중에 추가하고 싶다.

// 함수타입
const add = (money1: any, money2: number, unit: string): string => {
  //any는 뭐든 다 넣을 수 있다 -> 자바스크립트  // 함수를 통과시킨 결과(리턴)의 타입까지 설정할 수 있다.
  return money1 + money2 + unit;
};

const result = add(1000, 2000, "원");

타입스크립트 실행기는 ts-node

index.ts를 실행하고 싶다면 ts-node index.ts

tsconfig.json은 타입스크립트 설정파일

private readonly public, protected, private, readonly 한 개만 포함되면 자동으로 셋팅 된다.

this.mypower 자동으로 가능

public은 모든 곳에서 가능하다.

protected 밖에서는 접근 불가, 수정 불가

private는 나만 된다, 자식이 접근, 수정 불가, 밖에서도 접근 불가, 수정 불가

readonly 접근 가능 , 수정 불가(모두)

private readonly는 내 안에서 접근만 가능하게 하는 것이 private readonly

되게 안전하게 한다 나도 사용만 하고 수정은 못하게 한다.

왜 nest.js 를 써야하는지 << 를 잘 알아야 한다. 면접 질문


