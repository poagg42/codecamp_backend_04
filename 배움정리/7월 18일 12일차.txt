알고리즘 수업

정수 제곱근 판별

임의의 양의 정수 n에 대해, n이 어떤 양의 정수 x의 제곱인지 아닌지 판단하려 한다.

제곱근 , i * i === n

또는 Math.sqrt

Math.pow(sqrt+1, 2)

2번 제일 작은 수

math.min
//들어오는 인자 중에서 가장 작은 수를 찾아주는 메서드

스프레드 연산자와 math.min을 사용한다

정규 수업

기존에는 express를 사용했다면 이제는 nest.js를 사용한다

원래 백엔드는 자바 -> spring 프레임워크를 사용했는데

자바스크립트에서는 express를 사용

대규모 환경에서 여러 명이 사용하기에는 nest.js가 편리하다.

코드너리 << 어떤 회사가 어떤 기술 스택을 사용하고 있는지 확인할 수 있다.

스타트업에서는 익스프레스를 많이 사용한다. 

프론트엔드가 자바스크립트가 효율적이기 때문에 자바스크립트를 사용하고

백엔드도 자바스크립트로 하는 것이 효율적이다.

nest.js는 프레임워크다

프레임워크란 이미 많은 기능이 내장되어 있다.

수많은 사람들이 다같이 협업할 때 필요한 도구들.

npm에서는 다운로드 받아서 썼지만

nest.js는 뭘 다운받아야 하는지 정해져있다.

어느정도 규격이 잡혀져 있다.

api 만들 때는 무엇을 써야 하고 type을 지정할 때는 이것을 써야하고

재미는 덜하다 -> 실무는 통일된 규칙이 필요하다.

큰 프로젝트 만들 때도 부담이 없다.

익스프레스 -> nest로 갈 수 밖에 없다.

네스트는 폴더의 규칙이 있다.

규칙을 따라줘야 한다.

DAY 11 목표

1. 객체를 만들자 Class

2. 객체지향 프로그래밍 OOP

3. 내 폴더구조를 구해줘 MVC




클래스란? 

물건 만드는 설명서

class 붕어빵 {
    //만드는 방법
}

-> new 붕어빵()

만드는 방법대로 똑같은 붕어빵이 튀어나온다.

class 몬스터 {
    //만드는 방법
}

-> new 몬스터()

class component -> 

요즘 프론트에서도 브라우저 화면을 조립해서 만든다

부품을 만들고 import

부품을 component라고 한다.

class Date {
    //만드는 방법   -> 연도 추출(getFullYear) , (getMonth()) 같은 함수들
}

new Date()    ( 위의 기능을 가진 하나의 객체가 튀어나온다.)




const date = new Date()    // Date -> 내장 객체
    date.getFullYear()
    date.getMonth()
    date.getDate()  // 이렇게 객체를 가지고 프로그래밍 하는 것이 객체 지향 프로그래밍(OOP)
date-> 객체
    를 하면 호출이 된다.

    date를 객체 -> 인스턴스라고도 부른다.
    . 0-> 를 함수라고도 부르고 메서드라고도 부른다



const loginAPI = new LoginAPI()

왼쪽의 인스턴스가 오른쪽의 객체

loginAPI.login() 하면 로그인 된다

함수를 따로 만드는 것보다 그룹핑이 되어있기 때문에 유지보수가 쉽다.



SOLID 원칙

객체 지향 프로그래밍을 어떻게 했을 때 효율이 극대화 되더라

특히 여러 명이 할 때


SkyMonster와 GroundMonster 모두 부모 Monster에게 상속받는다

power
attack()
run() 기능 사용 가능   하지만 각각의 run() 기능이 다르다

Sky 날라서 도망간다
Ground 뛰어서 도망간다

super를 통해 부모의 생성자로 던져줄 수 있다.

//부모 것이 있는데 똑같은 걸로 내가 내꺼를 만들래 -> 오버라이딩

2교시

11-03-express

1. 클래스를 활용한 효율적인 API 만들기 -> 1.상품 구매 API, 2. 상품 환불 API, 3. 쿠폰 구매 API
2. 실무적인 폴더구조 만들기(MVC)
3. express의 노가다 알아보기
4. DI 이해하기

이 4가지가 적용되어 있는 것이 Nest.js


11-05
API 간소화 하고 export import ,,
 
 그리고 class를 new xx() 를 통해 가져온다

 productController.buyProduct   -< 뒤에 () 하면 안된다 그냥 값을 가져오는 것이다

 ()하면 실행하는것


 API가 깔끔해졌다.

 중첩되는 기능은 service로 뺀다.
   

다음 시간에는 의존성 주입이 어떤 효율이 있는지 알아본다.

mvc 구조로 해서 클래스 구조로 바꾸면 좀 더 효율적인 구조로 바뀌게 된다.

다른 회사마다 다른 구조가 될 수 있다.



