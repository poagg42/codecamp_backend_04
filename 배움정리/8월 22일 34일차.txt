1. 도메인 주소를 연결 -> DNS

2. 로드밸런서로 연결하자 -> LB


처음에 MySQL 인스턴스 만들기
-> development / 리전 서울 / 단일 영역 

production << 좋은 컴퓨터 메모리 많고 비싸다
development << 우리는 이걸로 -> 머신 유형 표준


서버리스 서비스 -> 백엔드 서버가 없다.

Br -> DB  인데 중간에 function(createBoard, fetchBoards 등등)

function이 db에 데이터를 등록해준다.

대신에 function이 24시간 켜져 있어야 한다.

scale out 작업을 해야 한다.

메모리가 얼마인지 cpu가 무엇인지 검사한다. -> 모니터링

서버리스 방식 장점 : 비용이 줄어든다. 모니터링 걱정이 덜 하다. scale out 덜 걱정

서버리스 방식 단점 : 대신 첫 번째 요청이 느리다.(cold start) 이유는 처음 요청은 이것을 켜야 하니까

그래도 일단 켜지면 다음 요청(두 번째 요청)은 빠르다.


그렇다면 이 것이 최적으로 쓰일 만한 곳은 어디일까? -> 관리자 페이지

관리자에서는 서버리스를 사용한다 -> cloud function / Lambda(AWS)

유저 -> 서버 구성



내 복습

서버리스 서비스

백엔드 서버가 없다 -> Cloud Function을 이용해서 함수 단위로 배포 진행

절차

브라우저에서 요청 -> Cloud Function을 이용한 함수 요청이 이루어짐 -> 해당 함수에서 DB에 접속하여 데이터 등록 및 조회

서버리스 서비스는 함수가 실행될 때만 비용이 부과

왜 서버리스 서비스를 계속 사용하지 않는가?

cold start 문제가 존재한다.

서버가 24시간 켜져 있는 것이 아니라 요청이 들어올 때마다 켜진다.


VPC

도커와 비슷한 가상환경

VPC 내부에 백엔드 서버 배포 

DB가 모두가 접속 가능한 VPC 외부에 있기 때문에 누구나 접속하지 못하게 VPC 내부로 넣어준다.

백엔드 서버 VPC와 DB 서버 VPC가 서로 다르기 때문에 VPC 피어링을 통해 두 VPC를 하나로 연결해 준다.


GCP에서 VPC는 자동 생성되므로 인스턴스를 만들게 되면 default VPC에 인스턴스가 들어간다.

DB를 만들게 되면 VPC안에 백엔드 서버 - 도커와 GCP에서 만든 SQL을 연결 -> 이것이 VPC 피어링



이제 도메인을 백엔드 서버에 연결해본다

DNS 영역이 제대로 만들어졌다면 

SOA 레코드 : Start Of Authority의 약자로 DNS 영역을 만들 때 기본적으로 등록되는 레코드 
관리 권한이 시작되는 곳으로 도메인의 시작점

NS 레코드 : NameServer의 약자로 도메인의 네임 서버를 지정하는 레코드

레코드 서버 추가로 도메인을 구글에서 관리한다.

네임 서버가 변경되었는지는 $dig 본인_도메인_주소 NS 명령어로 알아본다




레코드란? 

파일을 액세스할 때 실제로 읽고 쓰는 단위로서 사용되는 데이터 단위

데이터베이스에서 하나의 단위로 표현되는 자료의 집합 

****************************
VPC와 관련된 파이프 라인을 그려보자
****************************



Load Balancer(로드밸런서)

유저의 접속량이 늘어날수록 백엔드 서버 컴퓨터가 늘어날 것이기 때문에 백엔드 컴퓨터를 하나로 묶어줄 인스턴스 그룹을 만들어 줄 것 

이 때 DNS를 통해 A레코드로 바뀐 채, 백엔드 서버 컴퓨터로 접속하게 되는데 

백엔드 서버 컴퓨터 중 특정 컴퓨터에만 바뀐 A 레코드가 적용될 수 있다.

그렇게 되면 부하 관리를 위해 늘려준 백엔드 서버 컴퓨터를 추가로 만들어 준 의미가 없게 된다.

따라서, DNS와 백엔드 서버 컴퓨터 가운데 로드밸런서를 두고 

DNS A레코드에는 로드밸런서의 IP주소를 연결시켜주고

로드밸런서를 백엔드 서버 컴퓨터와 연결시켜서 부하를 분산시켜 준다.


백엔드 구성, 프론트엔드 구성이 나오는데

로드밸런서를 기준으로 외부 트래픽이 접속하는 곳을 프론트 엔드, 외부 트래픽을 넘겨주는 곳을 백엔드라고 부른다.

따라서 프론트엔드에서는 브라우저에서 어떻게 접속 요청을 받을 것인지 설정하며, 백엔드에서는 인스턴스 그룹과 연결 설정을 해줘야 한다.

health checker -> lb에 붙어있어서 서버가 켜져 있는지 확인하는 것